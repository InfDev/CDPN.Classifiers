// <auto-generated />
using System;
using CDPN.Classifiers.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CDPN.Classifiers.Infrastructure.SqlServer.Migrations
{
    [DbContext(typeof(ClassifiersContext))]
    [Migration("20211101170255_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CDPN.Classifiers.Entities.AtdCategory", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("StdAtdCategory");
                });

            modelBuilder.Entity("CDPN.Classifiers.Entities.AtdLevel", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("InUnitIdStartIndex")
                        .HasColumnType("int");

                    b.Property<int>("InUnitIdStoptIndex")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("StdAtdLevel");
                });

            modelBuilder.Entity("CDPN.Classifiers.Entities.AtdUnit", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("AtdCategoryId")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<int>("AtdLevelId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ParentId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("AtdCategoryId");

                    b.HasIndex("AtdLevelId");

                    b.HasIndex("ParentId");

                    b.ToTable("StdAtdUnit");
                });

            modelBuilder.Entity("CDPN.Classifiers.Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Alpha2")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nchar(2)")
                        .IsFixedLength(true);

                    b.Property<string>("Alpha3")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nchar(3)")
                        .IsFixedLength(true);

                    b.Property<string>("CurrencyId")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<int>("Group")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Alpha2")
                        .IsUnique();

                    b.HasIndex("Alpha3")
                        .IsUnique();

                    b.ToTable("StdCountry");
                });

            modelBuilder.Entity("CDPN.Classifiers.Entities.Currency", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Group")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int?>("MinorUnit")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("NumericCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NumericCode")
                        .IsUnique();

                    b.ToTable("StdCurrency");
                });

            modelBuilder.Entity("CDPN.Classifiers.Entities.PaperSize", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Format")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<string>("Use")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Width")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("StdPaperSize");
                });

            modelBuilder.Entity("CDPN.Classifiers.Entities.Region", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Center")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CountryClassifierId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("RegionLevelId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RegionLevelId");

                    b.ToTable("StdRegion");
                });

            modelBuilder.Entity("CDPN.Classifiers.Entities.RegionLevel", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("StdRegionLevel");
                });

            modelBuilder.Entity("CDPN.Classifiers.Entities.AtdUnit", b =>
                {
                    b.HasOne("CDPN.Classifiers.Entities.AtdCategory", "AtdCategory")
                        .WithMany("AtdUnits")
                        .HasForeignKey("AtdCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CDPN.Classifiers.Entities.AtdLevel", "AtdLevel")
                        .WithMany("AtdUnits")
                        .HasForeignKey("AtdLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CDPN.Classifiers.Entities.AtdUnit", "Parent")
                        .WithMany("Childrens")
                        .HasForeignKey("ParentId");

                    b.Navigation("AtdCategory");

                    b.Navigation("AtdLevel");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("CDPN.Classifiers.Entities.Region", b =>
                {
                    b.HasOne("CDPN.Classifiers.Entities.RegionLevel", "RegionLevel")
                        .WithMany("Regions")
                        .HasForeignKey("RegionLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RegionLevel");
                });

            modelBuilder.Entity("CDPN.Classifiers.Entities.AtdCategory", b =>
                {
                    b.Navigation("AtdUnits");
                });

            modelBuilder.Entity("CDPN.Classifiers.Entities.AtdLevel", b =>
                {
                    b.Navigation("AtdUnits");
                });

            modelBuilder.Entity("CDPN.Classifiers.Entities.AtdUnit", b =>
                {
                    b.Navigation("Childrens");
                });

            modelBuilder.Entity("CDPN.Classifiers.Entities.RegionLevel", b =>
                {
                    b.Navigation("Regions");
                });
#pragma warning restore 612, 618
        }
    }
}
